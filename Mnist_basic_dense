#Weston Harby
#basic feed forward densely connected NN for MNIST dataset
#~98% accuracy on test data after 20 epochs with batch size of 56
#each epoch takes ~7 seconds on a 1080 ti

#package import 
import tensorflow 
import numpy as cp
from tensorflow.python import keras
from tensorflow.python.keras.datasets import fashion_mnist, mnist, cifar100
from tensorflow.python.keras.models import Sequential
from tensorflow.python.keras.layers import Dense, Dropout
from tensorflow.python.keras.layers import Flatten,  MaxPooling2D, Conv2D

#main function that takes batch_size and epochs as inputs
def Mnist(batch_size, epochs):
    #load the datasets
    (x_train,y_train), (x_test, y_test) = mnist.load_data()

    #reshape for training
    x_train = x_train.reshape(60000,784).astype('float64')
    x_test = x_test.reshape(10000,784).astype('float64')
    
    #normalize greyscale values
    x_train /= 255
    x_test /= 255
    
    #define classes
    n_classes = 10
    y_train = keras.utils.to_categorical(y_train, n_classes)
    y_test = keras.utils.to_categorical(y_test, n_classes)
    
    #init model
    model = Sequential()
    model.add(Flatten())    
          
    model.add(Dense(784, activation='sigmoid', input_shape=(784,)))
    
    model.add(Dense(500, activation='sigmoid'))
    
    model.add(Dense(500, activation='sigmoid'))
    
    model.add(Dense(100, activation='sigmoid'))
    
    model.add(Dense(n_classes, activation='softmax'))
    
    #compile and fit the model
    model.compile(loss='categorical_crossentropy', optimizer='rmsprop', metrics=['accuracy'])
    model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, verbose=1, validation_data=(x_test,y_test))
    
Mnist(56,20)  
